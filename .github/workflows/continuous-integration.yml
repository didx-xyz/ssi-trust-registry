name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      PORT: 3000
      URL: http://localhost
      DB_CONNECTION_STRING: mongodb://localhost:4000
      DB_NAME: test_registry
    services:
      mongo:
        image: mongo:7.0
        ports:
          - 4000:27017

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: yarn test

  docker-build:
    name: Build and push
    needs: test
    permissions:
      packages: write
    runs-on: ubuntu-latest

    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.REGISTRY }}/ssi-trust-registry
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix={{branch}}-,priority=601,enable=${{ github.event_name != 'pull_request' }}
            type=ref,event=branch,priority=600
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64/v8
          # # Only build `linux/amd64` on PR
          # platforms: ${{ github.event_name != 'pull_request' && 'linux/amd64,linux/arm64/v8' || 'linux/amd64' }}
          # Don't push on PR
          push: ${{ github.event_name != 'pull_request' }}
          # # Load into Docker daemon on PR
          # load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - run: docker compose up -d
      #   env:
      #     IMAGE_TAG: ${{ steps.meta.outputs.version }}
      # - name: Wait for trust-registry to be healthy
      #   run: |-
      #     #!/bin/bash

      #     # Thank you Mr. Jippity
      #     # Maximum time to wait in seconds
      #     timeout=60

      #     # Start a timer
      #     start_time=$(date +%s)

      #     # Use 'until' to keep checking until the timeout is reached
      #     until [ $(( $(date +%s) - start_time )) -ge $timeout ]; do
      #         # Check if the 'trust-registry' container is running
      #         if docker ps --format "{{.Names}}" | grep -q 'trust-registry'; then
      #             # Check the health status of the 'trust-registry' container
      #             container_health=$(docker inspect --format='{{.State.Health.Status}}' trust-registry 2>/dev/null)

      #             if [ "$container_health" == "healthy" ]; then
      #                 echo "Container 'trust-registry' is healthy."
      #                 exit 0
      #             fi
      #         fi

      #         # Wait for a moment before checking again
      #         sleep 1
      #     done

      #     # Timeout reached, so exit with an error
      #     echo "Timeout reached. Container 'trust-registry' is not healthy."
      #     exit 1

      # # Run a few tests
      # - run: curl -s http://localhost:3000/health
      # - run: curl -s http://localhost:3000/api/registry | jq

      # - name: MongoDB logs
      #   if: always()
      #   run: docker logs mongo
      # - name: Trust Registry logs
      #   if: always()
      #   run: docker logs trust-registry
